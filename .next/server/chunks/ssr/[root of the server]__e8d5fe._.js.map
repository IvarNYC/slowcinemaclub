{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivarnycolaas/Documents/webdev/slowcinemaclub/lib/mongodb.ts"],"sourcesContent":["import { MongoClient, MongoClientOptions } from 'mongodb';\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\n}\n\nconst uri = process.env.MONGODB_URI;\nconst options: MongoClientOptions = {\n  maxPoolSize: 10,\n  minPoolSize: 5,\n  maxIdleTimeMS: 60000,\n  connectTimeoutMS: 10000,\n  socketTimeoutMS: 45000,\n};\n\nlet client: MongoClient;\nlet clientPromise: Promise<MongoClient>;\n\nif (process.env.NODE_ENV === 'development') {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  const globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>;\n  };\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options);\n    globalWithMongo._mongoClientPromise = client.connect();\n  }\n  clientPromise = globalWithMongo._mongoClientPromise;\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options);\n  clientPromise = client.connect();\n}\n\n// Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\nexport default clientPromise;\n\n// Helper function to get a database instance\nexport async function getDb(dbName: string) {\n  const client = await clientPromise;\n  return client.db(dbName);\n}\n\n// Helper function to get a collection\nexport async function getCollection(dbName: string, collectionName: string) {\n  const db = await getDb(dbName);\n  return db.collection(collectionName);\n} "],"names":[],"mappings":";;;;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAA8B;IAClC,aAAa;IACb,aAAa;IACb,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACnB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,MAAM,kBAAkB;IAIxB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;uCAIe;AAGR,eAAe,MAAM,MAAc;IACxC,MAAM,SAAS,MAAM;IACrB,OAAO,OAAO,EAAE,CAAC;AACnB;AAGO,eAAe,cAAc,MAAc,EAAE,cAAsB;IACxE,MAAM,KAAK,MAAM,MAAM;IACvB,OAAO,GAAG,UAAU,CAAC;AACvB"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivarnycolaas/Documents/webdev/slowcinemaclub/app/components/MovieCard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MovieCard = registerClientReference(\n    function() { throw new Error(\"Attempted to call MovieCard() from the server but MovieCard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/MovieCard.tsx <module evaluation>\",\n    \"MovieCard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8DACA"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivarnycolaas/Documents/webdev/slowcinemaclub/app/components/MovieCard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MovieCard = registerClientReference(\n    function() { throw new Error(\"Attempted to call MovieCard() from the server but MovieCard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/MovieCard.tsx\",\n    \"MovieCard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0CACA"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivarnycolaas/Documents/webdev/slowcinemaclub/app/reviews/page.tsx"],"sourcesContent":["import { Suspense } from \"react\";\nimport { getCollection } from \"@/lib/mongodb\";\nimport { MovieCard, Movie } from \"@/app/components/MovieCard\";\nimport { Metadata } from 'next';\nimport { Document } from 'mongodb';\n\n// Enable ISR with 1 hour revalidation\nexport const revalidate = 3600;\n\n// Add metadata for the reviews page\nexport const metadata: Metadata = {\n  title: 'Film Reviews - Slow Cinema Club',\n  description: 'In-depth analysis and reviews of arthouse and experimental cinema. Discover thoughtful critiques of slow cinema, independent films, and avant-garde masterpieces.',\n  openGraph: {\n    title: 'Film Reviews - Slow Cinema Club',\n    description: 'In-depth analysis and reviews of arthouse and experimental cinema. Discover thoughtful critiques of slow cinema, independent films, and avant-garde masterpieces.',\n    type: 'website',\n  },\n};\n\nasync function getAllMovies(): Promise<Movie[]> {\n  try {\n    const collection = await getCollection('scc', 'movies');\n    \n    const moviesRaw = await collection\n      .find(\n        {},\n        {\n          projection: {\n            _id: 1,\n            title: 1,\n            imagepreviewurl: 1,\n            director: 1,\n            year: 1,\n            description: 1,\n            rating: 1,\n            duration: 1,\n            updatedat: 1,\n            url: 1,\n            language: 1\n          },\n        }\n      )\n      .sort({ updatedat: -1 })\n      .toArray();\n\n    // Serialize MongoDB documents to plain objects and ensure all required fields are present\n    const movies: Movie[] = moviesRaw.map((movie: Document) => ({\n      _id: movie._id.toString(),\n      title: movie.title as string,\n      imagepreviewurl: movie.imagepreviewurl as string,\n      director: movie.director as string,\n      year: movie.year as string,\n      description: movie.description as string,\n      rating: movie.rating as number,\n      duration: movie.duration as string,\n      updatedat: movie.updatedat as string,\n      url: movie.url as string,\n      language: (movie.language as string) || ''\n    }));\n\n    return movies;\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    return [];\n  }\n}\n\nfunction MovieGrid({ movies }: { movies: Movie[] }) {\n  return (\n    <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n      {movies.map((movie, index) => (\n        <MovieCard key={movie._id} movie={movie} index={index} />\n      ))}\n    </div>\n  );\n}\n\nexport default async function ReviewsPage() {\n  const movies = await getAllMovies();\n\n  return (\n    <div>\n      <h1 className=\"text-4xl font-serif mb-8\">Film Reviews</h1>\n      <Suspense fallback={<div>Loading reviews...</div>}>\n        <MovieGrid movies={movies} />\n      </Suspense>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;;AAKO,MAAM,aAAa;AAGnB,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;IACb,WAAW;QACT,OAAO;QACP,aAAa;QACb,MAAM;IACR;AACF;AAEA,eAAe;IACb,IAAI;QACF,MAAM,aAAa,MAAM,CAAA,GAAA,8GAAA,CAAA,gBAAa,AAAD,EAAE,OAAO;QAE9C,MAAM,YAAY,MAAM,WACrB,IAAI,CACH,CAAC,GACD;YACE,YAAY;gBACV,KAAK;gBACL,OAAO;gBACP,iBAAiB;gBACjB,UAAU;gBACV,MAAM;gBACN,aAAa;gBACb,QAAQ;gBACR,UAAU;gBACV,WAAW;gBACX,KAAK;gBACL,UAAU;YACZ;QACF,GAED,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GACrB,OAAO;QAEV,0FAA0F;QAC1F,MAAM,SAAkB,UAAU,GAAG,CAAC,CAAC,QAAoB,CAAC;gBAC1D,KAAK,MAAM,GAAG,CAAC,QAAQ;gBACvB,OAAO,MAAM,KAAK;gBAClB,iBAAiB,MAAM,eAAe;gBACtC,UAAU,MAAM,QAAQ;gBACxB,MAAM,MAAM,IAAI;gBAChB,aAAa,MAAM,WAAW;gBAC9B,QAAQ,MAAM,MAAM;gBACpB,UAAU,MAAM,QAAQ;gBACxB,WAAW,MAAM,SAAS;gBAC1B,KAAK,MAAM,GAAG;gBACd,UAAU,AAAC,MAAM,QAAQ,IAAe;YAC1C,CAAC;QAED,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,EAAE;IACX;AACF;AAEA,SAAS,UAAU,EAAE,MAAM,EAAuB;IAChD,qBACE,8OAAC;QAAI,WAAU;kBACZ,OAAO,GAAG,CAAC,CAAC,OAAO,sBAClB,8OAAC,+HAAA,CAAA,YAAS;gBAAiB,OAAO;gBAAO,OAAO;eAAhC,MAAM,GAAG;;;;;;;;;;AAIjC;AAEe,eAAe;IAC5B,MAAM,SAAS,MAAM;IAErB,qBACE,8OAAC;;0BACC,8OAAC;gBAAG,WAAU;0BAA2B;;;;;;0BACzC,8OAAC,qMAAA,CAAA,WAAQ;gBAAC,wBAAU,8OAAC;8BAAI;;;;;;0BACvB,cAAA,8OAAC;oBAAU,QAAQ;;;;;;;;;;;;;;;;;AAI3B"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivarnycolaas/Documents/webdev/slowcinemaclub/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AA0BA,8BAA8B;AAzB9B,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAEzE,cAAc;AAGd,SAASE,IAAI,EAAEC,KAAK,GAAE;AAWtB,OAAO,MAAMG,eAAe;AAG5B,EAAC;;;;;;;;;;AAED,cAAc,qCAAoC,sBAAA;AAElD,UAAA,kDAA4D;AAC5D,MAAA,CAAO,MAAMK;IAAAA;IAAAA,SAAc,IAAIX,mBAAmB;YAChDY,QAAAA;YAAAA,GAAY;YAAA;wBACVC,IAAAA;oBAAAA,CAAMZ,UAAUa;oBAAAA,OAAQ;yBACxBC,MAAM;8BACNC,IAAAA,CAAAA,GAAU;wBAAA,QAAA;4BAAA,IAAA;4BAAA;yBAAA;;uBACV,2CAA2C;;iBAC3CC,YAAY;sBACZC,IAAAA,CAAAA;YAAAA,CAAU;SAAA;;SACVC,UAAU,EAAE;UACd,QAAA;YAAA,MAAA;gBACAC,OAAU,QAAA;wBAAA;4BACRC,KAAAA,CAAAA,GAAAA,IAAYnB,uKAAZmB,CAAAA,sBAAYnB,EAAAA,MAAAA,MAAAA,MAAAA,EAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,mSAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAAA,KAAAA,CAAAA,KAAAA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA;4BACd,OAAA,GAAA,mSAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA,EAAA,mSAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACA,MAAA,CAAA,YAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}