{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivarnycolaas/Documents/webdev/slowcinemaclub/lib/mongodb.ts"],"sourcesContent":["import { MongoClient, MongoClientOptions } from 'mongodb';\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\n}\n\nconst uri = process.env.MONGODB_URI;\nconst options: MongoClientOptions = {\n  maxPoolSize: 10,\n  minPoolSize: 5,\n  maxIdleTimeMS: 60000,\n  connectTimeoutMS: 10000,\n  socketTimeoutMS: 45000,\n};\n\nlet client: MongoClient;\nlet clientPromise: Promise<MongoClient>;\n\nif (process.env.NODE_ENV === 'development') {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  const globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>;\n  };\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options);\n    globalWithMongo._mongoClientPromise = client.connect();\n  }\n  clientPromise = globalWithMongo._mongoClientPromise;\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options);\n  clientPromise = client.connect();\n}\n\n// Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\nexport default clientPromise;\n\n// Helper function to get a database instance\nexport async function getDb(dbName: string) {\n  const client = await clientPromise;\n  return client.db(dbName);\n}\n\n// Helper function to get a collection\nexport async function getCollection(dbName: string, collectionName: string) {\n  const db = await getDb(dbName);\n  return db.collection(collectionName);\n} "],"names":[],"mappings":";;;;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAA8B;IAClC,aAAa;IACb,aAAa;IACb,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACnB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,MAAM,kBAAkB;IAIxB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;uCAIe;AAGR,eAAe,MAAM,MAAc;IACxC,MAAM,SAAS,MAAM;IACrB,OAAO,OAAO,EAAE,CAAC;AACnB;AAGO,eAAe,cAAc,MAAc,EAAE,cAAsB;IACxE,MAAM,KAAK,MAAM,MAAM;IACvB,OAAO,GAAG,UAAU,CAAC;AACvB"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///Users/ivarnycolaas/Documents/webdev/slowcinemaclub/app/api/movies/route.ts"],"sourcesContent":["import { getCollection } from \"@/lib/mongodb\";\nimport { NextResponse } from \"next/server\";\nimport { Document } from 'mongodb';\n\n// Enable ISR with 1 hour revalidation\nexport const revalidate = 3600;\n\nexport async function GET() {\n  try {\n    const collection = await getCollection('scc', 'movies');\n    \n    const moviesRaw = await collection\n      .find(\n        {},\n        {\n          projection: {\n            _id: 1,\n            title: 1,\n            imagepreviewurl: 1,\n            director: 1,\n            year: 1,\n            description: 1,\n            rating: 1,\n            duration: 1,\n            updatedAd: 1,\n            url: 1,\n            language: 1\n          },\n        }\n      )\n      .sort({ updatedAd: -1 })\n      .toArray();\n\n    // Serialize MongoDB documents to plain objects and ensure all required fields are present\n    const movies = moviesRaw.map((movie: Document) => ({\n      _id: movie._id.toString(),\n      title: movie.title as string,\n      imagepreviewurl: movie.imagepreviewurl as string,\n      director: movie.director as string,\n      year: movie.year as string,\n      description: movie.description as string,\n      rating: movie.rating as number,\n      duration: movie.duration as string,\n      updatedAd: movie.updatedAd as string,\n      url: movie.url as string,\n      language: (movie.language as string) || ''\n    }));\n\n    return NextResponse.json(movies);\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch movies' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAIO,MAAM,aAAa;AAEnB,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,MAAM,CAAA,GAAA,gHAAA,CAAA,gBAAa,AAAD,EAAE,OAAO;QAE9C,MAAM,YAAY,MAAM,WACrB,IAAI,CACH,CAAC,GACD;YACE,YAAY;gBACV,KAAK;gBACL,OAAO;gBACP,iBAAiB;gBACjB,UAAU;gBACV,MAAM;gBACN,aAAa;gBACb,QAAQ;gBACR,UAAU;gBACV,WAAW;gBACX,KAAK;gBACL,UAAU;YACZ;QACF,GAED,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GACrB,OAAO;QAEV,0FAA0F;QAC1F,MAAM,SAAS,UAAU,GAAG,CAAC,CAAC,QAAoB,CAAC;gBACjD,KAAK,MAAM,GAAG,CAAC,QAAQ;gBACvB,OAAO,MAAM,KAAK;gBAClB,iBAAiB,MAAM,eAAe;gBACtC,UAAU,MAAM,QAAQ;gBACxB,MAAM,MAAM,IAAI;gBAChB,aAAa,MAAM,WAAW;gBAC9B,QAAQ,MAAM,MAAM;gBACpB,UAAU,MAAM,QAAQ;gBACxB,WAAW,MAAM,SAAS;gBAC1B,KAAK,MAAM,GAAG;gBACd,UAAU,AAAC,MAAM,QAAQ,IAAe;YAC1C,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}